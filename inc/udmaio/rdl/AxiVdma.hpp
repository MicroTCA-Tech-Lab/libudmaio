/* This file was automatically generated with HECTARE v0.3.1
 *
 * DO NOT EDIT
 *
 *   input_filename = ./xml/system_app_axi_vdma_0_0.xml
 */

#pragma once

#include <cstdint>

#ifndef _HECTARE_PACKED
#define _HECTARE_PACKED __attribute__((packed, aligned(4)))
#endif  // _HECTARE_PACKED

/**
 * Reg
 *
 * Register Block
 *
*/
namespace axi_vdma {

// structs for hardware access

/**
 * MM2S VDMA Control Register
 *
 */
struct mm2s_vdmacr_t {
    /// Run / Stop controls the running and stopping of the VDMA channel. For any VDMA operations to commence, the AXI VDMA engine must be running (VDMACR.RS=1).   0 - Stop. VDMA stops when current (if any) VDMA operations are complete. The halted bit in the VDMA Status Register asserts to 1 when the VDMA engine is halted. This bit gets cleared by the AXI VDMA hardware when an AXI4 Slave response error occurs. The CPU can also choose to clear this bit to stop VDMA operations.   1 - Run. Start VDMA operations. The halted bit in the VDMA Status Register deasserts to 0 when the VDMA engine begins operations. Note: On Run/Stop clear, in-progress stream transfers might terminate early.
    bool rs : 1;

    /// Indicates frame buffer Circular mode or frame buffer Park mode.
    /// 0 - Park Mode. Engine will park on frame buffer referenced by PARK_PTR_REG.RdFrmPntrRef.
    /// 1 - Circular Mode. Engine continuously circles through frame buffers.
    bool circular_park : 1;

    /// Soft reset for AXI VDMA MM2S channel. Setting this bit to a 1 causes the AXI VDMA MM2S channel to be reset. Reset is accomplished gracefully. Pending commands/transfers are flushed or completed. AXI4-Stream reset output is asserted. Setting VDMACR.Reset = 1 only resets the MM2S channel. After completion of a soft reset all MM2S registers and bits are in the default state. This bit will be zero at the end of the reset cycle.   0 - Normal operation   1 - Reset in progress.
    bool reset : 1;

    /// Enables Genlock or Dynamic Genlock Synchronization.   0 - Genlock or Dynamic Genlock Synchronization disabled. Genlock input is ignored by MM2S.   1 - Genlock or Dynamic Genlock Synchronization enabled. MM2S synchronized to Genlock frame input. Note: This value is valid only when the channel is configured as Genlock Slave or Dynamic Genlock Master or Dynamic Genlock Slave. If configured for Genlock Master mode, this bit is reserved and always reads as zero.
    bool genlock_en : 1;

    /// Configures the MM2S channel to allow only a IRQFrameCount number of transfers to occur. After IRQFrameCount frames have been transferred, the MM2S channel halts, DMACR.RS bit is cleared to 0, and DMASR.Halted asserts to 1 when the channel has completely halted.
    bool frame_cnt_en : 1;
    unsigned rsvd_6_5 : 2;

    /// Selects internal or external genlock bus. This bit is set by default when both channels are enabled and are configured as a valid Genlock pair.   0 - External Genlock   1 - Internal Genlock
    bool genlock_src : 1;

    /// Indicates the master in control when MM2S channel is configured for Genlock slave/Dynamic Genlock Master/Dynamic Genlock Slave or reserved otherwise.   0000b - Controlling entity is Entity 1   0001b - Controller entity is Entity 2   0010b - Controller entity is Entity 3   and so on.
    unsigned rd_pntr_num : 4;

    /// Frame Count Complete Interrupt Enable. When set to 1, allows DMASR.FrmCnt_Irq to generate an interrupt out when IRQFrameCount value reaches zero.   0 - Frame Count Interrupt disabled   1 - Frame Count Interrupt enabled
    bool frm_cnt_irq_en : 1;

    /// Interrupt on Delay Count Interrupt Enable. When set to 1, allows DMASR.DlyCnt_Irq to generate an interrupt out.   0 - Delay Count Interrupt disabled   1 - Delay Count Interrupt enabled.
    bool dly_cnt_irq_en : 1;

    /// Interrupt on Error Interrupt Enable. When set to 1, allows VDMASR.Err_Irq to generate an interrupt out.   0 - Error Interrupt disabled   1 - Error Interrupt enabled.
    bool err_irq_en : 1;

    /// Enables repeat or advance frame when AXI VDMA encounters a frame error. This is applicable when AXI VDMA is configured in Genlock Master or Dynamic Genlock Master.   0 - Advance to next frame on frame errors   1 - Repeat previous frame on frame errors
    bool repeat_en : 1;

    /// This value is used for setting the interrupt threshold. When a frame transfer starts, an internal counter counts down from the Interrupt Frame Count setting.
    /// When the count reaches zero, an interrupt out is generated by the MM2S channel. When a value different than the current IRQFrameCount is written to this field, the internal frame counter is reset to the new value.
    /// The minimum setting for the count is 0x01. A write of 0x00 to this register sets the count to 0x01.
    /// When DMACR.FrameCntEn = 1, this value determines the number of frame buffers to process.
    uint8_t irq_frame_count;

    /// This value is used for setting the interrupt delay count value. The delay count interrupt is a mechanism for causing the MM2S channel to generate an interrupt after the delay period has expired. The timer begins counting either upon receipt of frame sync (external fsync mode) or completion of vsize lines (free run mode). It resets with a subsequent start-of-packet ( m_axis_mm2s_tvalid ) assertion. When a value different than the current IRQDelayCount is written to this field, the internal delay counter is reset to the new value.
    /// Setting this value to zero disables the delay counter interrupt.
    uint8_t irq_delay_count;
} _HECTARE_PACKED;
static_assert(sizeof(mm2s_vdmacr_t) == 4, "Contents of register mm2s_vdmacr must be 4 bytes");

/**
 * MM2S VDMA Status Register
 *
 */
struct mm2s_vdmasr_t {
    /// VDMA Channel Halted.
    /// Indicates the run/stop state of the VDMA channel.
    ///   0 - VDMA channel running
    ///   1 - VDMA channel halted. This bit gets set when VDMACR.RS = 0. There can be a lag of time between when VDMACR.RS = 0 and when VDMASR.Halted = 1.
    bool halted : 1;
    unsigned rsvd_3_1 : 3;

    /// VDMA Internal Error.   0 - No VDMA Internal Errors.   1 - VDMA Internal Error detected. This error occurs during one of the following conditions.   (a) HSIZE or VSIZE register were written zeros or   (b) Internal error received from helper core axi_datamover or   (c) Transferred frame size is lesser than programmed vsize (SOFEarlyErr). In case (a) and/or (b) channel stops (that is, the VDMACR.RS bit is set to 0 and remains cleared).
    /// To restart the channel, soft or hard reset is required.
    /// In case (c), channel does not stop or halt.
    bool vdma_int_err : 1;

    /// VDMA Slave Error.   0 - No VDMA Slave Errors.   1 - VDMA Slave Error detected. VDMA Engine halts. This error occurs if the slave read from the Memory Map interface issues a Slave Error.
    bool vdma_slv_err : 1;

    /// VDMA Decode Error. This error occurs if the address request is to an invalid address.   0 = No VDMA Decode Errors.   1 = VDMA Decode Error detected. VDMA channel halts.
    bool vdma_dec_err : 1;

    /// Start of Frame Early Error   0 - No start-of-frame Error   1 - Start of Frame Early Error detected This error occurs if mm2s_fsync is received before the completion of the frame on the streaming interface.
    bool sof_early_err : 1;
    unsigned rsvd_11_8 : 4;

    /// Frame Count Interrupt.   0 - No Frame Count Interrupt.   1 - Frame Count Interrupt detected. If enabled (DMACR.FrmCnt_IrqEn = 1) and if the interrupt threshold has been met, an interrupt out is generated.
    bool frm_cnt_irq : 1;

    /// Interrupt on Delay.   0 - No Delay Interrupt.   1 - Delay Interrupt detected. If enabled (DMACR.DlyCnt_IrqEn = 1), an interrupt out is generated when the delay count reaches its programmed value.
    bool dly_cnt_irq : 1;

    /// Interrupt on Error.   0 - No error Interrupt.   1 - Error interrupt detected. If enabled (VDMACR.Err_IrqEn = 1), an interrupt out is generated when an error is detected.
    bool err_irq : 1;
    unsigned rsvd_15_15 : 1;

    /// Interrupt Frame Count Status. Indicates current interrupt frame count value.
    uint8_t irq_frame_cnt_sts;

    /// Interrupt Delay Count Status. Indicates current interrupt delay time value.
    uint8_t irq_delay_cnt_sts;
} _HECTARE_PACKED;
static_assert(sizeof(mm2s_vdmasr_t) == 4, "Contents of register mm2s_vdmasr must be 4 bytes");

/**
 * MM2S Register Index
 *
 */
struct mm2s_reg_index_t {
    /// When Frame Buffers is greater than 16
    /// 0 - Any write or read access between 0x5C to 0x98 accesses the Start Address 1 to 16.
    /// 1 - Any write or read access between 0x5C to 0x98 accesses the Start Address 17 to 32.
    bool mm2s_reg_index : 1;
    unsigned rsvd_31_1 : 31;
} _HECTARE_PACKED;
static_assert(sizeof(mm2s_reg_index_t) == 4, "Contents of register mm2s_reg_index must be 4 bytes");

/**
 * Park Pointer Register
 *
 */
struct park_ptr_reg_t {
    /// Read Frame Pointer Reference. When Parked (MM2S_VDMACR.Circular_Park = 0) the MM2S channel parks on the buffer referenced by this frame number.
    unsigned rd_frm_ptr_ref : 5;
    unsigned rsvd_7_5 : 3;

    /// Write Frame Pointer Reference. When Parked (S2MM_VDMACR.Circular_Park = 0) the S2MM channel parks on the buffer referenced by this frame number.
    unsigned wr_frm_ptr_ref : 5;
    unsigned rsvd_15_13 : 3;

    /// Read Frame Store number. Indicates the frame number being operated on by the MM2S channel. During VDMA operations this value continually updates as each frame is processed. During error conditions, the value is updated with the frame number being operated on when the error occurred. It will again start tracking the current frame number when all errors are cleared.
    unsigned rd_frm_store : 5;
    unsigned rsvd_23_21 : 3;

    /// Write Frame Store number. Indicates current frame number being operated on by the S2MM channel. During VDMA operations this value continually updates as each frame is processed. During error conditions, the value is updated with the frame number being operated on when the error occurred. It will again start tracking the current frame number when all errors are cleared.
    unsigned wr_frm_store : 5;
    unsigned rsvd_31_29 : 3;
} _HECTARE_PACKED;
static_assert(sizeof(park_ptr_reg_t) == 4, "Contents of register park_ptr_reg must be 4 bytes");

/**
 * AXI VDMA Version Register
 *
 */
struct vdma_version_t {
    /// Reserved for Internal Use Only. Integer value from 0 to 9,999.
    uint16_t xilinx_internal;
    unsigned rsvd_19_16 : 4;

    /// Two separate 4-bit hexadecimal values. 00 = 00h, 01 = 01h, and so on.
    unsigned minor_version : 8;

    /// Single 4-bit hexadecimal value. v1 = 1h, v2=2h, v3=3h, and so on.
    unsigned major_version : 4;
} _HECTARE_PACKED;
static_assert(sizeof(vdma_version_t) == 4, "Contents of register vdma_version must be 4 bytes");

/**
 * S2MM VDMA Control Register
 *
 */
struct s2mm_vdmacr_t {
    /// Run / Stop controls the running and stopping of the VDMA channel. For any VDMA operations to commence, the AXI VDMA engine must be running (VDMACR.RS=1).   0 - Stop. VDMA stops when current (if any) VDMA operations are complete. The halted bit in the VDMA Status Register asserts to 1 when the VDMA engine is halted. This bit gets cleared by the AXI VDMA hardware when an AXI4 Slave response error occurs. The CPU can also choose to clear this bit to stop VDMA operations.   1 - Run. Start VDMA operations. The halted bit in the VDMA Status Register deasserts to 0 when the VDMA engine begins operations. Note: On Run/Stop clear, in-progress stream transfers might terminate early.
    bool rs : 1;

    /// Indicates frame buffer Circular mode or frame buffer Park mode.
    /// 0 - Park Mode. Engine will park on frame buffer referenced by PARK_PTR_REG.RdFrmPntrRef.
    /// 1 - Circular Mode. Engine continuously circles through frame buffers.
    bool circular_park : 1;

    /// Soft reset for AXI VDMA S2MM channel. Setting this bit to a 1 causes the AXI VDMA S2MM channel to be reset. Reset is accomplished gracefully. Pending commands/transfers are flushed or completed. AXI4-Stream reset output is asserted. Setting VDMACR.Reset = 1 only resets the S2MM channel. After completion of a soft reset all S2MM registers and bits are in the default state. This bit will be zero at the end of the reset cycle.   0 - Normal operation   1 - Reset in progress.
    bool reset : 1;

    /// Enables Genlock or Dynamic Genlock Synchronization.   0 - Genlock or Dynamic Genlock Synchronization disabled. Genlock input is ignored by S2MM.   1 - Genlock or Dynamic Genlock Synchronization enabled. S2MM synchronized to Genlock frame input. Note: This value is valid only when the channel is configured as Genlock Slave or Dynamic Genlock Master or Dynamic Genlock Slave. If configured for Genlock Master mode, this bit is reserved and always reads as zero.
    bool genlock_en : 1;

    /// Configures the S2MM channel to allow only a IRQFrameCount number of transfers to occur. After IRQFrameCount frames have been transferred, the S2MM channel halts, DMACR.RS bit is cleared to 0, and DMASR.Halted asserts to 1 when the channel has completely halted.
    bool frame_cnt_en : 1;
    unsigned rsvd_6_5 : 2;

    /// Selects internal or external genlock bus. This bit is set by default when both channels are enabled and are configured as a valid Genlock pair.   0 - External Genlock   1 - Internal Genlock
    bool genlock_src : 1;

    /// Indicates the master in control when S2MM channel is configured for Genlock slave/Dynamic Genlock Master/Dynamic Genlock Slave or reserved otherwise.   0000b - Controlling entity is Entity 1   0001b - Controller entity is Entity 2   0010b - Controller entity is Entity 3   and so on.
    unsigned rd_pntr_num : 4;

    /// Frame Count Complete Interrupt Enable. When set to 1, allows DMASR.FrmCnt_Irq to generate an interrupt out when IRQFrameCount value reaches zero.   0 - Frame Count Interrupt disabled   1 - Frame Count Interrupt enabled
    bool frm_cnt_irq_en : 1;

    /// Interrupt on Delay Count Interrupt Enable. When set to 1, allows DMASR.DlyCnt_Irq to generate an interrupt out.   0 - Delay Count Interrupt disabled   1 - Delay Count Interrupt enabled.
    bool dly_cnt_irq_en : 1;

    /// Interrupt on Error Interrupt Enable. When set to 1, allows VDMASR.Err_Irq to generate an interrupt out.   0 - Error Interrupt disabled   1 - Error Interrupt enabled.
    bool err_irq_en : 1;

    /// Enables repeat or advance frame when AXI VDMA encounters a frame error. This is applicable when AXI VDMA is configured in Genlock Master or Dynamic Genlock Master.   0 - Advance to next frame on frame errors   1 - Repeat previous frame on frame errors
    bool repeat_en : 1;

    /// This value is used for setting the interrupt threshold. When a frame transfer starts, an internal counter counts down from the Interrupt Frame Count setting.
    /// When the count reaches zero, an interrupt out is generated by the S2MM channel. When a value different than the current IRQFrameCount is written to this field, the internal frame counter is reset to the new value.
    /// The minimum setting for the count is 0x01. A write of 0x00 to this register sets the count to 0x01.
    /// When DMACR.FrameCntEn = 1, this value determines the number of frame buffers to process.
    uint8_t irq_frame_count;

    /// This value is used for setting the interrupt delay count value. The delay count interrupt is a mechanism for causing the S2MM channel to generate an interrupt after the delay period has expired. The timer begins counting either upon receipt of frame sync (external fsync mode) or completion of vsize lines (free run mode). It resets with a subsequent start-of-packet ( s_axis_s2mm_tvalid ) assertion. When a value different than the current IRQDelayCount is written to this field, the internal delay counter is reset to the new value.
    /// Setting this value to zero disables the delay counter interrupt.
    uint8_t irq_delay_count;
} _HECTARE_PACKED;
static_assert(sizeof(s2mm_vdmacr_t) == 4, "Contents of register s2mm_vdmacr must be 4 bytes");

/**
 * S2MM VDMA Status Register
 *
 */
struct s2mm_vdmasr_t {
    /// VDMA Channel Halted.
    /// Indicates the run/stop state of the VDMA channel.
    ///   0 - VDMA channel running
    ///   1 - VDMA channel halted. This bit gets set when VDMACR.RS = 0. There can be a lag of time between when VDMACR.RS = 0 and when VDMASR.Halted = 1.
    bool halted : 1;
    unsigned rsvd_3_1 : 3;

    /// VDMA Internal Error.   0 - No VDMA Internal Errors.   1 - VDMA Internal Error detected. This error occurs during one of the following conditions.   (a) HSIZE or VSIZE register were written zeros or   (b) Internal error received from helper core axi_datamover or   (c) Transferred frame size is lesser than programmed vsize (SOFEarlyErr). In case (a) and/or (b) channel stops (that is, the VDMACR.RS bit is set to 0 and remains cleared).
    /// To restart the channel, soft or hard reset is required.
    /// In case (c), channel does not stop or halt.
    bool vdma_int_err : 1;

    /// VDMA Slave Error.   0 - No VDMA Slave Errors.   1 - VDMA Slave Error detected. VDMA Engine halts. This error occurs if the slave read from the Memory Map interface issues a Slave Error.
    bool vdma_slv_err : 1;

    /// VDMA Decode Error. This error occurs if the address request is to an invalid address.   0 = No VDMA Decode Errors.   1 = VDMA Decode Error detected. VDMA channel halts.
    bool vdma_dec_err : 1;

    /// Start of Frame Early Error   0 - No start-of-frame Error   1 - Start of Frame Early Error detected. VDMA does not halt. This error occurs if incoming frame size is lesser than programmed vsize value. Write 1 to Clear in flush on fsync mode and Read Only otherwise.
    bool sof_early_err : 1;

    /// End of Line Early Error.   0 - No End of Line Early Error   1 - End of Line Early Error detected. VDMA does not halt. This error occurs if the incoming line size is lesser than the programmed hsize value. Write 1 to clear.
    bool eol_early_err : 1;
    unsigned rsvd_10_9 : 2;

    /// Start of Frame Late Error.   0 - No start-of-frame Late Error   1 - Start of Frame Late Error detected. VDMA does not halt. This error occurs if the incoming frame size is greater than the programmed vsize value. Write 1 to Clear in flush on fsync mode.
    bool sof_late_err : 1;

    /// Frame Count Interrupt.   0 - No Frame Count Interrupt.   1 - Frame Count Interrupt detected. If enabled (DMACR.FrmCnt_IrqEn = 1) and if the interrupt threshold has been met, an interrupt out is generated.
    bool frm_cnt_irq : 1;

    /// Interrupt on Delay.   0 - No Delay Interrupt.   1 - Delay Interrupt detected. If enabled (DMACR.DlyCnt_IrqEn = 1), an interrupt out is generated when the delay count reaches its programmed value.
    bool dly_cnt_irq : 1;

    /// Interrupt on Error.   0 - No error Interrupt.   1 - Error interrupt detected. If enabled (VDMACR.Err_IrqEn = 1), an interrupt out is generated when an error is detected.
    bool err_irq : 1;

    /// End of Line Late Error.   0 - No End of Line Late Error   1 - End of Line Late Error detected. VDMA does not halt. This error occurs if the incoming line size is greater than the programmed hsize value. Write 1 to clear
    bool eol_late_err : 1;

    /// Interrupt Frame Count Status. Indicates current interrupt frame count value.
    uint8_t irq_frame_cnt_sts;

    /// Interrupt Delay Count Status. Indicates current interrupt delay time value.
    uint8_t irq_delay_cnt_sts;
} _HECTARE_PACKED;
static_assert(sizeof(s2mm_vdmasr_t) == 4, "Contents of register s2mm_vdmasr must be 4 bytes");

/**
 * S2MM Error Interrupt Mask Register
 *
 */
struct s2mm_vdma_irq_mask_t {
    /// 1 - Masks interrupt due to SOFEarlyErr.
    /// 0 - Does not mask interrupt due to SOFEarlyErr.
    bool irq_mask_sof_early_err : 1;

    /// 1 - Masks interrupt due to EOLEarlyErr.
    /// 0 - Does not mask interrupt due to EOLEarlyErr.
    bool irq_mask_eol_early_err : 1;

    /// 1 - Masks interrupt due to SOFLateErr.
    /// 0 - Does not mask interrupt due to SOFLateErr.
    bool irq_mask_sof_late_err : 1;

    /// 1 = Masks interrupt due to EOLLateErr.
    /// 0 = Does not mask interrupt due to EOLLateErr.
    bool irq_mask_eol_late_err : 1;
    unsigned rsvd_31_4 : 28;
} _HECTARE_PACKED;
static_assert(sizeof(s2mm_vdma_irq_mask_t) == 4,
              "Contents of register s2mm_vdma_irq_mask must be 4 bytes");

/**
 * S2MM Register Index
 *
 */
struct s2mm_reg_index_t {
    /// When Frame Buffers is greater than 16
    /// 0 - Any write or read access between 0xAC to 0xE8 accesses the Start Address 1 to 16.
    /// 1 - Any write or read access between 0xAC to 0xE8 accesses the Start Address 17 to 32.
    bool s2mm_reg_index : 1;
    unsigned rsvd_31_1 : 31;
} _HECTARE_PACKED;
static_assert(sizeof(s2mm_reg_index_t) == 4, "Contents of register s2mm_reg_index must be 4 bytes");

/**
 * MM2S Vertical Size
 *
 */
struct mm2s_vsize_t {
    /// Indicates the vertical size in lines of the video data to transfer.
    /// Note: Writing a value of zero in this field causes a VDMAIntErr to be flagged in the MM2S_VDMASR register on the next frame boundary.
    unsigned vertical_size : 13;
    unsigned rsvd_31_13 : 19;
} _HECTARE_PACKED;
static_assert(sizeof(mm2s_vsize_t) == 4, "Contents of register mm2s_vsize must be 4 bytes");

/**
 * MM2S Horizontal Size
 *
 */
struct mm2s_hsize_t {
    /// Indicates the horizontal size in bytes of the video data to transfer.
    /// Note: A value of zero in this field when MM2S_VSIZE is written causes a VDMAIntErr to be flagged in the MM2S_VDMASR register on the next frame boundary.
    uint16_t horizontal_size;
    uint16_t rsvd_31_16;
} _HECTARE_PACKED;
static_assert(sizeof(mm2s_hsize_t) == 4, "Contents of register mm2s_hsize must be 4 bytes");

/**
 * MM2S Frame Delay and Stride
 *
 */
struct mm2s_frmdly_stride_t {
    /// Indicates the number of address bytes between the first pixels of each video line.
    /// Note: A stride value less than MM2S_HSIZE causes data to be corrupted.
    uint16_t stride;
    uint8_t rsvd_23_16;

    /// Indicates the minimum number of frame buffers the Genlock slave is to be behind the locked master. This field is only used if the channel is enabled for Genlock Slave operations. This field has no meaning in other Genlock modes.
    /// Note: Frame Delay must be less than or equal to Frame Buffers or an undefined results occur.
    unsigned frame_delay : 5;
    unsigned rsvd_31_29 : 3;
} _HECTARE_PACKED;
static_assert(sizeof(mm2s_frmdly_stride_t) == 4,
              "Contents of register mm2s_frmdly_stride must be 4 bytes");

/**
 * S2MM Vertical Size
 *
 */
struct s2mm_vsize_t {
    /// Indicates the vertical size in lines of the video data to transfer.
    /// Note: Writing a value of zero in this field causes a VDMAIntErr to be flagged in the S2MM_VDMASR register on the next frame boundary.
    unsigned vertical_size : 13;
    unsigned rsvd_31_13 : 19;
} _HECTARE_PACKED;
static_assert(sizeof(s2mm_vsize_t) == 4, "Contents of register s2mm_vsize must be 4 bytes");

/**
 * S2MM Horizontal Size
 *
 */
struct s2mm_hsize_t {
    /// Indicates the horizontal size in bytes of the video data to transfer.
    /// Note: A value of zero in this field when S2MM_VSIZE is written causes a VDMAIntErr to be flagged in the S2MM_VDMASR register on the next frame boundary.
    uint16_t horizontal_size;
    uint16_t rsvd_31_16;
} _HECTARE_PACKED;
static_assert(sizeof(s2mm_hsize_t) == 4, "Contents of register s2mm_hsize must be 4 bytes");

/**
 * S2MM Frame Delay and Stride
 *
 */
struct s2mm_frmdly_stride_t {
    /// Indicates the number of address bytes between the first pixels of each video line.
    /// Note: A stride value less than S2MM_HSIZE causes data to be corrupted.
    uint16_t stride;
    uint8_t rsvd_23_16;

    /// Indicates the minimum number of frame buffers the Genlock slave is to be behind the locked master. This field is only used if the channel is enabled for Genlock Slave operations. This field has no meaning in other Genlock modes.
    /// Note: Frame Delay must be less than or equal to Frame Buffers or an undefined results occur.
    unsigned frame_delay : 5;
    unsigned rsvd_31_29 : 3;
} _HECTARE_PACKED;
static_assert(sizeof(s2mm_frmdly_stride_t) == 4,
              "Contents of register s2mm_frmdly_stride must be 4 bytes");

/**
 * MM2S Start Address Register 1
 *
 */
using mm2s_sa_t = uint32_t;
static_assert(sizeof(mm2s_sa_t) == 4, "Contents of register mm2s_sa must be 4 bytes");

/**
 * S2MM Start Address Register 1
 *
 */
using s2mm_sa_t = uint32_t;
static_assert(sizeof(s2mm_sa_t) == 4, "Contents of register s2mm_sa must be 4 bytes");

// Convenience template and wrapper

/**
 * @brief Template class for the axi_vdma block, containing accessors for all its registers
 *
 * @tparam R_array_acc Register accessor template (provided by user), receiving the register type as parameter
 * @tparam R_acc_arg Constructor argument type for the register accessor (e.g. hardware-dependent information)
 *
 */
template <template <typename, uint32_t, uint32_t, uint32_t> typename R_array_acc,
          typename R_acc_arg>
struct block_template {
    template <typename R, uint32_t O>
    using R_acc = R_array_acc<R, O, 0, 0>;

    /// Register accessor for MM2S VDMA Control Register
    R_acc<mm2s_vdmacr_t, 0x0> mm2s_vdmacr;
    /// Register accessor for MM2S VDMA Status Register
    R_acc<mm2s_vdmasr_t, 0x4> mm2s_vdmasr;
    /// Register accessor for MM2S Register Index
    R_acc<mm2s_reg_index_t, 0x14> mm2s_reg_index;
    /// Register accessor for Park Pointer Register
    R_acc<park_ptr_reg_t, 0x28> park_ptr_reg;
    /// Register accessor for AXI VDMA Version Register
    R_acc<vdma_version_t, 0x2c> vdma_version;
    /// Register accessor for S2MM VDMA Control Register
    R_acc<s2mm_vdmacr_t, 0x30> s2mm_vdmacr;
    /// Register accessor for S2MM VDMA Status Register
    R_acc<s2mm_vdmasr_t, 0x34> s2mm_vdmasr;
    /// Register accessor for S2MM Error Interrupt Mask Register
    R_acc<s2mm_vdma_irq_mask_t, 0x3c> s2mm_vdma_irq_mask;
    /// Register accessor for S2MM Register Index
    R_acc<s2mm_reg_index_t, 0x44> s2mm_reg_index;
    /// Register accessor for MM2S Vertical Size
    R_acc<mm2s_vsize_t, 0x50> mm2s_vsize;
    /// Register accessor for MM2S Horizontal Size
    R_acc<mm2s_hsize_t, 0x54> mm2s_hsize;
    /// Register accessor for MM2S Frame Delay and Stride
    R_acc<mm2s_frmdly_stride_t, 0x58> mm2s_frmdly_stride;
    /// Register accessor for S2MM Vertical Size
    R_acc<s2mm_vsize_t, 0xa0> s2mm_vsize;
    /// Register accessor for S2MM Horizontal Size
    R_acc<s2mm_hsize_t, 0xa4> s2mm_hsize;
    /// Register accessor for S2MM Frame Delay and Stride
    R_acc<s2mm_frmdly_stride_t, 0xa8> s2mm_frmdly_stride;

    /// Register array accessor for MM2S Start Address Register 1
    R_array_acc<mm2s_sa_t, 0x5c, 16, 4> mm2s_sa;
    /// Register array accessor for S2MM Start Address Register 1
    R_array_acc<s2mm_sa_t, 0xac, 16, 4> s2mm_sa;

    block_template(R_acc_arg arg)
        : mm2s_vdmacr{arg}
        , mm2s_vdmasr{arg}
        , mm2s_reg_index{arg}
        , park_ptr_reg{arg}
        , vdma_version{arg}
        , s2mm_vdmacr{arg}
        , s2mm_vdmasr{arg}
        , s2mm_vdma_irq_mask{arg}
        , s2mm_reg_index{arg}
        , mm2s_vsize{arg}
        , mm2s_hsize{arg}
        , mm2s_frmdly_stride{arg}
        , s2mm_vsize{arg}
        , s2mm_hsize{arg}
        , s2mm_frmdly_stride{arg}
        , mm2s_sa{arg}
        , s2mm_sa{arg} {}
};

/**
 * @brief Convenience wrapper for block_template to omit the explicit naming of the constructor argument
 *
 * @tparam R_array_acc Register accessor template (provided by user), receiving the register type as parameter
 * R_acc must define a constructor_arg_type,
 * e.g. `using constructor_arg_type = std::reference_wrapper<HwAccessor>;`
 */
template <template <typename, uint32_t, uint32_t, uint32_t> typename R_array_acc>
using block =
    block_template<R_array_acc, typename R_array_acc<mm2s_vdmacr_t, 0, 0, 0>::constructor_arg_type>;

}  // namespace axi_vdma
